name: CI

# Controls when the workflow will run
on:
  # Triggers the workflow on push or pull request events
  push:
  pull_request:

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  # This workflow contains a single job called "build"
  build:
    # The type of runner that the job will run on
    runs-on: ubuntu-latest

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v4

      # Runs a single command using the runner's shell
      - name: Run a one-line script
        run: echo Hello, world!

      # Runs a set of commands using the runner's shell
      - name: Run a multi-line script
        run: |
          echo Add other actions to build,
          echo test, and deploy your project.

  # Static code style check using ktlint + PR annotations via reviewdog
  lint:
    name: Ktlint (code style)
    # The type of runner that the job will run on
    runs-on: ubuntu-latest

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - name: Checkout
        uses: actions/checkout@v4

      # Installs Java 21 (Temurin distribution â€” OpenJDK by Eclipse Adoptium) so Gradle and ktlint can run
      - name: Setup JDK 21
        uses: actions/setup-java@v4
        with:
          distribution: temurin
          java-version: "21"

      # Validates the Gradle Wrapper for security (prevents running a compromised wrapper)
      - name: Validate Gradle Wrapper
        uses: gradle/wrapper-validation-action@v2

      # Sets up Gradle with dependency caching to speed up subsequent runs
      - name: Setup Gradle (cache)
        uses: gradle/actions/setup-gradle@v3

      # Runs ktlint across the project, printing violations to the log and generating Checkstyle XML reports
      - name: Run ktlint (generate checkstyle)
        run: ./gradlew ktlintCheck --console=plain
        continue-on-error: true

      # Uploads the ktlint XML report(s) as an artifact for later download/debugging (optional)
      - name: Upload ktlint report as artifact
        uses: actions/upload-artifact@v4
        with:
          name: ktlint-report
          path: "**/build/reports/ktlint/**/*.xml"

      # Installs reviewdog CLI (used to convert ktlint's Checkstyle XML into inline PR comments)
      - name: Install reviewdog
        run: |
          curl -sfL https://raw.githubusercontent.com/reviewdog/reviewdog/master/install.sh | sh -s -- -b "$HOME/bin"
          echo "$HOME/bin" >> "$GITHUB_PATH"

      # Annotates pull requests with inline comments based on the ktlint Checkstyle reports (only runs on PRs)
      - name: Reviewdog (annotate PR)
        if: ${{ github.event_name == 'pull_request' }}
        env:
          # GitHub token needed for reviewdog to post comments
          REVIEWDOG_GITHUB_API_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          # Find all ktlint Checkstyle XMLs and feed them to reviewdog
          # - reporter=github-pr-review -> inline PR review comments
          # - filter-mode=diff_context  -> only comment on changed lines
          # - level=error               -> mark as error in PR UI
          xmls=$(find . -type f -path "*/build/reports/ktlint/*/*.xml" -print0)
          if [ -z "$xmls" ]; then
            echo "No ktlint Checkstyle reports found. Did ktlintCheck run?"
            exit 0
          fi
          # Concatenate all XMLs into reviewdog input
          xargs -0 cat <<EOF | reviewdog -f=checkstyle -name="ktlint" -reporter=github-pr-review -filter-mode=diff_context -level=error
          $xmls
          EOF