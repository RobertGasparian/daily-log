name: CI

# Controls when the workflow will run
on:
  # Triggers the workflow on push or pull request events
  push:
  pull_request:

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

# Allow the workflow to write PR comments/annotations
permissions:
  contents: read
  pull-requests: write

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  # This workflow contains a single job called "build"
  build:
    # The type of runner that the job will run on
    runs-on: ubuntu-latest

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v4

      # Runs a single command using the runner's shell
      - name: Run a one-line script
        run: echo Hello, world!

      # Runs a set of commands using the runner's shell
      - name: Run a multi-line script
        run: |
          echo Add other actions to build,
          echo test, and deploy your project.

  # Static code style check using ktlint + PR annotations via reviewdog
  lint:
    name: Ktlint (code style)
    # The type of runner that the job will run on
    runs-on: ubuntu-latest

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - name: Checkout
        uses: actions/checkout@v4

      # Installs Java 21 (Temurin distribution — OpenJDK by Eclipse Adoptium) so Gradle and ktlint can run
      - name: Setup JDK 21
        uses: actions/setup-java@v4
        with:
          distribution: temurin
          java-version: "21"

      # Validates the Gradle Wrapper for security (prevents running a compromised wrapper)
      - name: Validate Gradle Wrapper
        uses: gradle/wrapper-validation-action@v2

      # Sets up Gradle with dependency caching to speed up subsequent runs
      - name: Setup Gradle (cache)
        uses: gradle/actions/setup-gradle@v3

      # Runs ktlint across the project, printing violations to the log and generating Checkstyle XML reports
      # On PUSH: mark step as NEUTRAL (78) if violations -> not green; job continues for reviewdog.
      # On PR:   keep step green so reviewdog can run, and fail later after comments.
      - name: Run ktlint (generate checkstyle)
        run: |
          ./gradlew ktlintCheck --console=plain || EXIT_CODE=$?
          if [ -n "${EXIT_CODE}" ]; then
            echo "Ktlint found issues."
            if [ "${GITHUB_EVENT_NAME}" = "push" ]; then
              # Neutral — will show as ⚪ in the checks list
              exit 78
            else
              # For PRs keep going; reviewdog will comment and we'll fail later
              exit 0
            fi
          fi
        continue-on-error: true  # allow later steps (reviewdog) to run regardless

      # Uploads the ktlint XML report(s) as an artifact for later download/debugging (optional)
      - name: Upload ktlint report as artifact
        uses: actions/upload-artifact@v4
        with:
          name: ktlint-report
          path: "**/build/reports/ktlint/**/*.xml"

      # (Debug) Show which reports were generated + current event context
      - name: List generated ktlint reports
        run: |
          echo "GITHUB_WORKSPACE=$GITHUB_WORKSPACE"
          echo "Searching for ktlint XML reports…"
          find . -type f -path "*/build/reports/ktlint/*/*.xml" -print || true
      - name: Show event + PR repo info
        run: |
          echo "EVENT: $GITHUB_EVENT_NAME"
          echo "HEAD REPO: ${{ github.event.pull_request.head.repo.full_name }}"
          echo "THIS REPO: ${{ github.repository }}"

      # Installs reviewdog CLI (used to convert ktlint's Checkstyle XML into inline PR comments or Checks annotations)
      - name: Install reviewdog
        run: |
          curl -sfL https://raw.githubusercontent.com/reviewdog/reviewdog/master/install.sh | sh -s -- -b "$HOME/bin"
          echo "$HOME/bin" >> "$GITHUB_PATH"

      # Annotates pull requests with inline comments based on the ktlint Checkstyle reports (PR runs only)
      # Also normalizes absolute file paths in XML to repo-relative so reviewdog matches the diff.
      - name: Reviewdog (PR inline comments)
        if: ${{ github.event_name == 'pull_request' && github.event.pull_request.head.repo.full_name == github.repository }}
        env:
          # GitHub token needed for reviewdog to post comments (provided automatically by Actions)
          REVIEWDOG_GITHUB_API_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          REVIEWDOG_DEBUG: "true"
        run: |
          # Ensure we have ktlint Checkstyle reports
          if ! find . -type f -path "*/build/reports/ktlint/*/*.xml" | grep -q . ; then
            echo "No ktlint Checkstyle reports found. Did ktlintCheck run?"
            exit 0
          fi

          # Helper to normalize absolute paths in Checkstyle XML: name="$GITHUB_WORKSPACE/..." -> name="..."
          normxml() { sed "s|name=\"${GITHUB_WORKSPACE}/|name=\"|g" "$1"; }

          set -o pipefail
          TMP_OUT="$(mktemp)"

          # Stream normalized XML into reviewdog for inline PR comments on changed lines
          while IFS= read -r -d '' f; do
            normxml "$f"
          done < <(find . -type f -path "*/build/reports/ktlint/*/*.xml" -print0) \
          | reviewdog \
              -f=checkstyle \
              -name="ktlint" \
              -reporter=github-pr-review \
              -filter-mode=diff_context \
              -level=error \
              -tee | tee "$TMP_OUT"

          # If nothing was annotated inline (likely issues outside the diff), set fallback flag
          if ! grep -E "reporter=github-pr-review.+(error|warning|info|issues) found" "$TMP_OUT" >/dev/null 2>&1 ; then
            echo "FALLBACK_PR_CHECK=true" >> "$GITHUB_ENV"
          fi

      # Annotates push runs (and forked PRs) in the Checks tab (no inline comments) — with path normalization
      - name: Reviewdog (Checks annotations)
        if: ${{ github.event_name == 'push' || (github.event_name == 'pull_request' && github.event.pull_request.head.repo.full_name != github.repository) }}
        env:
          REVIEWDOG_GITHUB_API_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          REVIEWDOG_DEBUG: "true"
        run: |
          if ! find . -type f -path "*/build/reports/ktlint/*/*.xml" | grep -q . ; then
            echo "No ktlint Checkstyle reports found. Did ktlintCheck run?"
            exit 0
          fi

          normxml() { sed "s|name=\"${GITHUB_WORKSPACE}/|name=\"|g" "$1"; }
          while IFS= read -r -d '' f; do
            normxml "$f"
          done < <(find . -type f -path "*/build/reports/ktlint/*/*.xml" -print0) \
          | reviewdog \
              -f=checkstyle \
              -name="ktlint" \
              -reporter=github-check \
              -filter-mode=diff_context \
              -level=error \
              -tee

      # Fallback for PRs: always show results in Checks tab (even if violations are outside the diff)
      - name: Reviewdog (PR Checks fallback)
        if: ${{ github.event_name == 'pull_request' && env.FALLBACK_PR_CHECK == 'true' }}
        env:
          REVIEWDOG_GITHUB_API_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          REVIEWDOG_DEBUG: "true"
        run: |
          normxml() { sed "s|name=\"${GITHUB_WORKSPACE}/|name=\"|g" "$1"; }
          while IFS= read -r -d '' f; do
            normxml "$f"
          done < <(find . -type f -path "*/build/reports/ktlint/*/*.xml" -print0) \
          | reviewdog \
              -f=checkstyle \
              -name="ktlint" \
              -reporter=github-check \
              -filter-mode=file \
              -level=error \
              -tee

      # Fail the PR job if ktlint violations exist (AFTER comments/annotations are posted).
      - name: Fail job if violations (PR only, same-repo)
        if: ${{ github.event_name == 'pull_request' && github.event.pull_request.head.repo.full_name == github.repository }}
        run: |
          if find . -type f -path "*/build/reports/ktlint/*/*.xml" -print0 | xargs -0 -r grep -q "<error " ; then
            echo "ktlint violations found."
            exit 1
          fi
